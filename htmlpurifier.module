<?php

/**
 * @file
 * Hooks and utilities for the HTML Purifier module.
 */

use Drupal\Core\Language\Language;
use Drupal\filter\Plugin\FilterBase;

/**
 * Implements hook_htmlpurifier_info()
 */
function htmlpurifier_htmlpurifier_info() {
  $info_list = array();
  $info_list['htmlpurifier_basic'] = array(
    'name' => 'HTML Purifier Basic',
    'description' => 'A simple and sane configuration',
    'allowed' => [
      'URI.DisableExternalResources',
      'URI.DisableResources',
      'URI.Munge',
      'Attr.EnableID',
      'HTML.Allowed',
      'HTML.ForbiddenElements',
      'HTML.ForbiddenAttributes',
      'HTML.SafeObject',
      'Output.FlashCompat',
      'AutoFormat.RemoveEmpty',
      'AutoFormat.Linkify',
      'AutoFormat.AutoParagraph',
    ],
    'weight' => -20,
  );

  $info_list['htmlpurifier_advanced'] = array(
    'name' => 'HTML Purifier Advanced',
    'description' => 'Every configuration option available to HTML Purifier',
    'weight' => -10,
  );

  return $info_list;
}

/**
 * Return a list of all htmlpurifier_info provided by modules.
 */
function htmlpurifier_get_info() {
  $info_list = &drupal_static(__FUNCTION__, array());

  if (empty($info_list)) {
    foreach (\Drupal::moduleHandler()->getImplementations('htmlpurifier_info') as $module) {
      $info = \Drupal::moduleHandler()->invoke($module, 'htmlpurifier_info');
      if (isset($info) && is_array($info)) {
        // Assign the name of the module implementing the htmlpurifier_info and ensure
        // default values.
        foreach (array_keys($info) as $name) {
          $info[$name]['module'] = $module;
          $info[$name] += array(
            'htmlpurifier_help' => TRUE,
            'htmlpurifier_filter_tips' => 'HTML tags will be transformed to conform to HTML standards.',
            'description' => '',
            'allowed' => TRUE,
            'settings' => array(
              'AutoFormat.AutoParagraph' => TRUE,
              'AutoFormat.Linkify' => TRUE,
              'HTML.Doctype' => 'XHTML 1.0 Transitional',
              'Core.AggressivelyFixLt' => TRUE,
              'Cache.DefinitionImpl' => 'Drupal',
            ),
            'weight' => 0,
          );

          // SERVER_NAME is more reliable than HTTP_HOST
          if (!empty($_SERVER['SERVER_NAME'])) {
            $info[$name]['settings'] += array(
              'URI.Host' => $_SERVER['SERVER_NAME']
            );
          }

          // Define the language direction
          if (\Drupal::languageManager()->getCurrentLanguage()->getDirection() === Language::DIRECTION_RTL) {
            $info[$name]['settings'] += array(
              'Attr.DefaultTextDir' => 'rtl'
            );
          }
        }
        $info_list = array_merge($info_list, $info);
      }
    }
    // Allow modules to alter htmlpurifier_info definitions.
    \Drupal::moduleHandler()->alter('htmlpurifier_info', $info_list);
  }

  return $info_list;
}

/**
 * Returns the HTMLPurifier_Config object corresponding to a text format.
 *
 * @param FilterBase $filter
 *
 * @param string $config_name
 *   Configuration name
 * @return
 *    Instance of HTMLPurifier_Config.
 */
function _htmlpurifier_get_config(FilterBase $filter, $config_name = NULL, $reset = FALSE) {

  // @TODO: Create Drupal\htmlpurifier\Cache\HTMLPurifierDefinitionCacheDrupal
  /*$factory = HTMLPurifier_DefinitionCacheFactory::instance();

  //Register a cache definition for internal workings of htmlpurifier library.
  $factory->register('Drupal', 'Drupal\htmlpurifier\Cache\HTMLPurifierDefinitionCacheDrupal');

  if (empty($config_name)) {
    $config_name = $this->settings['htmlpurifier_config_name'];
  }*/

  $info_list = htmlpurifier_get_info();

  /* @var $config \HTMLPurifier_Config */
  $config = HTMLPurifier_Config::createDefault();


  $settings = $info_list[$config_name]['settings'];
  foreach ($settings as $key => $value) {
    $config->set($key, $value);
  }

  // @TODO: Figure out what is this for and fix it or remove it.
  /*
  $filters = [];
  $config_data = isset($filters['htmlpurifier']->settings['htmlpurifier_config']) && !$reset ? $filters['htmlpurifier']
    ->settings['htmlpurifier_config'] : array();

  // Need to do a little more if Filter.ExtractStyleBlocks is set
  if (!empty($config_data['Filter.ExtractStyleBlocks'])) {
    $config_data['Filter.ExtractStyleBlocks'] = '0';
    $error = t('Could not enable ExtractStyleBlocks because CSSTidy library was not found, detected or the version is unsupported. Please download a supported version from %url.',
      array(
        '%url' => $library['download url']
      ));
    drupal_set_message($error, 'error', FALSE);
  }*/
  $config_data = [];

  // {FALSE, TRUE, FALSE} = {no index, everything is allowed, don't do mq fix}
  $config->mergeArrayFromForm($config_data, FALSE, TRUE, FALSE);

  // Allow other modules to alter the HTML definition.
  // HTMLPurifier_Config::getDefinition() can throw an exception.
  try {
    /* @var $html_definition \HTMLPurifier_Definition */
    $html_definition = $config->getDefinition('HTML', TRUE);
    \Drupal::moduleHandler()->alter('htmlpurifier_html_definition', $html_definition);
  }
  catch (\Exception $exception) {
    \Drupal::logger('htmlpurifier')->error($exception->getMessage());
  }

  return $config;
}

/**
 * Callback for htmlpurifier_config_form.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the markup element)
 */
function _htmlpurifer_config_form_ajax_callback($form, $form_state) {
  return $form['filters']['settings']['htmlpurifier']['htmlpurifier_config_form'];
}

/**
 * Sort by weight of the htmlpurifier info
 *
 * @param mixed array $a
 * @param mixed array $b
 * @return number
 */
function _htmlpurifier_option_cmp($a, $b) {
  return $a['weight'] - $b['weight'];
}

/**
 *  Implements hook_theme().
 */
function htmlpurifier_theme() {
  return [
    'htmlpurifier_config_form' => [
      'variables' => [
        'rendered_form' => '',
        'description_message' => '',
      ],
    ],
  ];
}
