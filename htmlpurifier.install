<?php
/**
 * @file
 * Install, update and uninstall functions for the HTML Purifier module.
 */

/**
 * Implements hook_schema().
 */
function htmlpurifier_schema() {
  $schema['cache_htmlpurifier'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_htmlpurifier']['description'] = 'Cache table for the HTML Purifier module just like cache_filter, except that cached text is stored permanently until flushed or manually invalidated. This helps prevent recurrent cache slams on pages with lots of segments of HTML.';

  return $schema;
}

/**
 * Implements hook_requirements().
 *
 * Checks the version of HTML Purifier on install and issues an error if there is a problem
 */
function htmlpurifier_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Default requirement title
    $title = t('HTML Purifier Library');

    $library = libraries_detect('htmlpurifier');

    // Grab the versions of HTML Purifier
    $current_version = \Drupal::config('htmlpurifier.settings')->get('htmlpurifier_version_current');
    $our_version = isset($library['version']) ? $library['version'] : '';

    // If we aren't at a current version, check again...
    // This will happen the first time if we've never checked before
    if (!$current_version) {
      $current_version = htmlpurifier_check_version();
    }
    // If we can't check and retrieve the current version for some reason
    if (!$current_version) {
      $description = t('Unable to check for the latest version of the HTML Purifier library.  You will need to check manually at %url to find out if the version you are using is out of date.', array('%url' => $library['download url']));
      $requirements['htmlpurifer_check']['title'] = $title;
      $requirements['htmlpurifer_check']['value'] = $our_version;
      $requirements['htmlpurifer_check']['description'] = $description;
      $requirements['htmlpurifer_check']['severity'] = REQUIREMENT_WARNING;
    }
    // Is a newer version available?
    elseif (version_compare($current_version, $our_version, '>')) {
      $description = t('Your HTML Purifier library is out of date. The latest version is %version, which you can download from %url.',
        array(
          '%version' => $current_version,
          '%url' => $library['download url'],
        )
      );
      $requirements['htmlpurifer_check']['title'] = $title;
      $requirements['htmlpurifer_check']['value'] = $our_version;
      $requirements['htmlpurifer_check']['description'] = $description;
      $requirements['htmlpurifer_check']['severity'] = REQUIREMENT_WARNING;
    }

    // Success!  We found the library
    if ($library['installed']) {
      $requirements['htmlpurifer']['title'] = $title;
      $requirements['htmlpurifer']['value'] = $our_version;
      $requirements['htmlpurifer']['description'] = t('Installed version');
      $requirements['htmlpurifer']['severity'] = REQUIREMENT_OK;
    }
    // Not installed or unsupported version installed
    else {
      $supported_versions = array_keys($library['versions']);
      $error = $library['error message']
        . t('  Please download a supported version (%versions) from %url.',
          array(
            '%versions' => implode(' or ', $supported_versions),
            '%url' => $library['download url'],
          )
        );
      $requirements['htmlpurifer']['title'] = $title;
      $requirements['htmlpurifer']['value'] = $our_version;
      $requirements['htmlpurifer']['description'] = $error;
      $requirements['htmlpurifer']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}
